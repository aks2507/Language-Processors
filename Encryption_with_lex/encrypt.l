%{
   /*
    Write a program to encrypt the text using lex. Copy a text file with some predefined words as
    special and encrypt the text as follows:
    ● Special words have to be rotated right by two positions (cyclic) and written right to left.
    ● Other English words should be encrypted by replacing each character by ASCII +
    k-cyclic and words need to be written in reverse.
    ● Each number should be replaced by a new number which is generated by swapping left
    half and right half of the number. If the number has odd number of digits, the middle digit
    should be at the same place
    ● All other characters have to be retained as it is except the sequence of whitespaces
    which need to be replaced by single space.
   */
   #include<bits/stdc++.h>
   #include<fstream>
   using namespace std;
   ofstream fout;
   set<string>key; //to store all the keywords
   void handle_words(char* inp_string);
   void other_text_non_recog(char* inp_string);
   void handle_numbers(char* inp_string);
   void handle_spaces(char* inp_string);
   void printset(set<string> s);
%}

alpha [a-z|A-Z][a-zA-Z0-9]
digit [0-9]

%%
{alpha}+        handle_words(yytext);
{digit}+        handle_numbers(yytext);
\n              cout<<"\n";
" "[ ]+ | 
\t              handle_spaces(yytext);
.               other_text_non_recog(yytext);
%%

void printset(set<string> s)
{
    set<string>::iterator it;
    for(it=s.begin();it!=s.end();it++)
    {
        cout<<*it<<" ";
    }
    cout<<"\n";
}

void handle_words(char* inp_string)
{
	string s(inp_string);
    if(s.length()<=2) 
    {
       cout<<s;
       return;
    }
	if(key.find(s)!=key.end()) //right rotate
	{
		string str="";
        char a=s[s.length()-1];
        char b=s[s.length()-2];
		for(int i=s.length();i>=2;i--)
		{
			s[i]=s[i-2];
		}
		s[0]=b;
        s[1]=a;
    
		reverse(s.begin(),s.end());
		cout<<s;
	}
	else //k-cyclic rotation
	{
        int k=3;
        string str="";
		
		for(int i=0;i<s.length();i++)
		{
			str+=char(s[i]+k);
		}
		reverse(str.begin(),str.end());
		cout<<str;
	}
}

void handle_numbers(char* inp_string)
{
	string s(inp_string);
	int len = s.length();
	int mid = len/2;
    string firstHalf="", secHalf="", mid_part="";
    if(len%2 == 0)
    {
        firstHalf = s.substr(0, mid);
	    secHalf = s.substr(mid, mid);
        secHalf += firstHalf;
    }
	else
    {
        firstHalf = s.substr(0, mid);
        mid_part=s.substr(mid,1);
	    secHalf = s.substr(mid+1, mid);
        secHalf += mid_part;
        secHalf += firstHalf;
    }
	cout<<secHalf;
}

void other_text_non_recog(char* inp_string)
{
	string s(inp_string),str="";
	for(int i=0;i<s.length();)
	{
	   str+=s[i++];	
       while(i<s.length() && s[i]==' ')
       {
           i++;
       }

	}
    cout<<str;
}
void handle_spaces(char* inp_string)
{
    string s(inp_string),str="";
    for(int i=0;i<s.length();i++)
    {
        if(i==0)
            str+=s[i];
        else
            continue;
    }
    //cout<<str<<str.length()<<" ";
    cout<<str;
}

int main()
{
  	ifstream fin;
  	fin.open("keywords.txt");
  	string s="";
  	while(fin)
  	{
    	getline(fin,s);
        //cout<<s<<endl;
     	key.insert(s);
  	}
    //printset(key);
  	fin.close();
  	yyin=fopen("sample.txt","r");
	yylex();
    cout<<"\n";
    return 0;
}